unit StamMitarbeiterFrm;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
  System.Generics.Collections, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, Vcl.StdCtrls, Vcl.ExtCtrls,
  Vcl.Mask, Vcl.DBCtrls, Vcl.Grids, Vcl.DBGrids, classesPersonen, MainFrm, Helpers, SuchenFrm, XStammdatenFrm;

type
  TStamMitarbeiterForm = class(TXStammdatenForm)
    Button1: TButton;
    DataSource1: TDataSource;
    FDTable1: TFDTable;
    DBGrid1: TDBGrid;
    NameEdit: TEdit;
    Label2: TLabel;
    VornameEdit: TEdit;
    Label1: TLabel;
    function EingabeValidieren(): boolean;
    procedure SuchenButtonClick(Sender: TObject);
    procedure AnzeigeFuellen;
    procedure AnzeigeUmschalten(Status: TFormStatus); reintroduce;
    procedure AbbrechenButtonClick(Sender: TObject);
    procedure LoeschenButtonClick(Sender: TObject);
    procedure SpeichernButtonClick(Sender: TObject);
    procedure NeuButtonClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
  private
    Mitarbeiter: TMitarbeiter;
    { Private-Deklarationen }
  public
    { Public-Deklarationen }
  end;

var
  StamMitarbeiterForm: TStamMitarbeiterForm;

implementation

{$R *.dfm}


procedure TStamMitarbeiterForm.AbbrechenButtonClick(Sender: TObject);
begin
  self.AnzeigeFuellen;
  if Assigned(Mitarbeiter) then
    self.AnzeigeUmschalten(fsGesperrt)
  else
    self.AnzeigeUmschalten(fsLeer)
end;

procedure TStamMitarbeiterForm.AnzeigeFuellen;
begin
  if Assigned(Mitarbeiter) then
  begin
    self.NameEdit.Text := Mitarbeiter.Name;
    self.VornameEdit.Text := Mitarbeiter.Vorname;
  end
  else
  begin
    self.NameEdit.Clear;
    self.VornameEdit.Clear
  end;
end;

procedure TStamMitarbeiterForm.AnzeigeUmschalten(Status: TFormStatus);
begin
  inherited;
  self.NameEdit.Enabled := not(self.FormStatus in [fsGesperrt, fsLeer]);
  self.VornameEdit.Enabled := not(self.FormStatus in [fsGesperrt, fsLeer]);
  self.AnzeigeFuellen;
end;

procedure TStamMitarbeiterForm.Button1Click(Sender: TObject);
begin
  self.FDTable1.Refresh;
end;

function TStamMitarbeiterForm.EingabeValidieren:
    boolean;
begin
  result := false;

end;

procedure TStamMitarbeiterForm.FormShow(Sender: TObject);
begin
  inherited;
  self.FDTable1.Active := true;
end;

procedure TStamMitarbeiterForm.LoeschenButtonClick(Sender: TObject);
begin
  if messagedlg('Möchten Sie den Mitarbeiter ' + Mitarbeiter.VollName + ' wirklich löschen?', mtConfirmation,
      [mbYes, mbCancel], 0) = mrYes THEN
    if Mitarbeiter.Loeschen then
    begin
      FreeAndNil(Mitarbeiter);
      self.AnzeigeUmschalten(fsLeer);
    end
    else
      messagedlg('Beim Löschen trat ein Fehler auf. Bitte wenden Sie sich an den Administrator', mtInformation,
          [mbOk], 0);
end;

procedure TStamMitarbeiterForm.NeuButtonClick(Sender: TObject);
begin
  if Assigned(Mitarbeiter) then
    FreeAndNil(Mitarbeiter);
  self.AnzeigeUmschalten(fsNeu);
end;

procedure TStamMitarbeiterForm.SpeichernButtonClick(Sender: TObject);
begin
  if not Assigned(Mitarbeiter) then
    Mitarbeiter := TMitarbeiter.Create(NameEdit.Text, VornameEdit.Text, MainForm.MainConnection);
  if Mitarbeiter.Speichern then
    self.AnzeigeUmschalten(fsGesperrt)
  else
    messagedlg('Beim Speichern trat ein Fehler auf. Bitte wenden Sie sich an den Administrator', mtInformation,
        [mbOk], 0);
end;

procedure TStamMitarbeiterForm.SuchenButtonClick(Sender: TObject);
var
  SuchenForm   : TSuchenForm;
  SuchEintraege: TList<TSucheintrag>;
begin
  SuchEintraege := TList<TSucheintrag>.Create;
  SuchEintraege.Add(TSucheintrag.Create('Name', 'Nachname'));
  SuchEintraege.Add(TSucheintrag.Create('Vorname', 'Vorname'));
  SuchEintraege.Add(TSucheintrag.Create('Vorname + '' '' + Name', 'voller Name'));
  SuchenForm := TSuchenForm.Create(application, 'Mitarbeiter', SuchEintraege, MainForm.MainConnection);
  if SuchenForm.ShowModal = mrOK then
  begin
    if Assigned(Mitarbeiter) then
      FreeAndNil(Mitarbeiter);
    Mitarbeiter := TMitarbeiter.CreateFromId(SuchenForm.Ergebnis, MainForm.MainConnection);
    self.AnzeigeUmschalten(fsGesperrt);
  end;
end;

end.
